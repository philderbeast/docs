{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Scarf docs! Scarf is a toolchain for commercializing your open-source software. Understand how your software is used, connect with the businesses that rely on your projects, and get properly compensated for work. Overview Scarf's approach focuses on identifying which companies rely on your software. Scarf currently offers telemetry for package installation as well as documentation/website traffic.","title":"Introduction"},{"location":"#welcome-to-the-scarf-docs","text":"Scarf is a toolchain for commercializing your open-source software. Understand how your software is used, connect with the businesses that rely on your projects, and get properly compensated for work.","title":"Welcome to the Scarf docs!"},{"location":"#overview","text":"Scarf's approach focuses on identifying which companies rely on your software. Scarf currently offers telemetry for package installation as well as documentation/website traffic.","title":"Overview"},{"location":"distribute-with-scarf/","text":"Using Scarf as software distribution tool What is Scarf? Why should I use it? Scarf makes it easy to publish your packages and developer tools to users on Linux and Mac, understand how your software is being used, and charge the companies that benefit from your work in a commercial setting. Scarf is a developer-centric, cross-platform system package manager. If you distribute your software with Scarf, your users will be able to easily install it with the scarf CLI, and you'll gain insights into how your software is used such as: Install counts Exit codes when your program is invoked Execution times Sub-commands and flags that are passed on the command line And much more For your users who wish to use your package without reporting usage statistics (or those who just want to support your work), Scarf gives you an easy way to collect payments in exchange. You can easily create a Scarf-connected Stripe account, set your desired price for your package, and your users can easily pay to use your package without reporting usage statistics. The best part is that you can get all of these features without writing any code! You simply upload your package to Scarf. The end-user will install your package via scarf which installs your program in a way that that Scarf can automatically capture your package's usage statistics and enforce permission levels. How it works When a user installs your package through Scarf, it is installed inside of a thin wrapper. This wrapper will log usage statistics automatically when it invokes your package, and can also perform other checks, like whether the user has purchased a particular tier of your package and its dependencies. To get more information on how the CLI works, you can check out the code on Github Installing Scarf On Debian-based linux systems, there is a dependency on netbase $ sudo apt install netbase To get Scarf, simply run: $ curl -L https://scarf.sh/install | bash You'll then need to add $HOME/.scarf/bin to the front of your PATH Creating your Scarf account Head over to https://scarf.sh to register your developer account. Creating your first package Once you're registered, you'll want to create your package on the \"New Package\" page of the Scarf website . The package name here will be what users type when they install your package, but isn't necessarily the name of the executable they will invoke.Scarf currently supports packages in the form of: A locally built archive with an executable that can be run directly on the target platform. An npm package that you upload to scarf rather than npm itself. Scarf is actively adding other package installation types. If your package type isn't supported yet, let us know what you need and we'll prioritize it! Define your package specification You can now add releases to your package that your users can install! A Scarf package release primarily involves writing a small package specification or uploading your npm package directly. Yaml specifications (archive based packages) Standard archive based packages can be described in yaml. name: curl-runnings author: Avi Press copyright: 2019 Avi Press license: MIT version: 0.11.0 # For each platform (currently MacOS and Linux_x86_64) you're distributing your release to, include an entry in distributions. distributions: - platform: MacOS # The binaries your package provides. If your binary names are the same as # their path within your archive, you can simply provide a string of binary names bins: curl-runnings: path/inside/your/archive/curl-runnings # uri can be a remote or local tar archive uri: https://github.com/aviaviavi/curl-runnings/releases/download/0.11.0/curl-runnings-0.11.0-mac.tar.gz # [Optional] if your archive has extra files that should be included, list them here includes: - ./directories - ./or-files.txt - platform: Linux_x86_64 bins: - curl-runnings uri: ./path/to/local/archive.tar.gz includes: [] depends: - scarf-packages - your-package - depends-on Some notes: You can use scarf check-package ./path/to/your/package-file.yaml to validate your package file. Currently, it won't do things like check your archive or test your release, but it will make sure you spec type-checks, and that you have a valid license type and platform. Dependency handling is still immature. Chances are, the package you depend on isn't on Scarf yet! We're working hard to fix that, however. Just send an email to help@scarf.sh or reach out on gitter and we'll help get the packages you need. Currently any dependencies you add in your scarf.yaml will use the latest validated version. NPM You can upload an npm based package to scarf rather than npm itself. It will be globally installed by scarf just like any other scarf package. You'll need to make sure your package.json includes a main entry that points to the script that will be ultimately invoked, and the package must have a license. You can use `scarf check-package ./path/to/your/package.json to validate your package file. Piggybacking on other package managers If your package is already distributed with another package manager, you can configure Scarf to invoke that package install while still getting all the other benefits Scarf provides. This can be useful to get your package on Scarf if Scarf doesn't yet support your exact package type natively (if this is the case, send us an email with what you need!). Scarf will call out to the external manager on the users system. ... bins: bins - bin1 - bin2 ... - binN distributions: - external: Debian bins: *bins - external: RPM bins: *bins - external: Homebrew installCommand: install --special --flags my_package bins: *bins ... Currently supported third party package types include: Homebrew Debian ( apt ) RPM CPAN Let us know if you need something else! Uploading your release Once you have a valid spec, it's time to upload! You'll need your SCARF_API_TOKEN , which you can find by going to your account page . To upload, run: SCARF_API_TOKEN=${your_token} scarf upload ./path/to/your/validated-spec.(yaml|json) Packages on Scarf can't be deleted once they're uploaded! Once your release is uploaded, your users can install your package with a simple: scarf install ${your_package_name} Viewing your package analytics Once you've pushed a release to your package, you can head over to the dashboard to see your packages install and usage stats! Connecting a Stripe Account Navigate to your account details page by clicking your username in the nav bar. Find the Connect to Stripe button at the bottom, and follow Stripe's onboarding process. It only takes a few minutes. You'll be redirected back to Scarf when the enrollment is complete. Adding a private usage tier to your package Now that you've connected a Stripe account, you're ready to start collecting payments for your package! Navigate to your package detail page on Scarf and click Start monetizing package . Set your price. That's it! Scarf handles all user registration and payments so you are now fully ready to start making money from your package. Stripe will send your payouts daily to your connected bank account. (NOTE: your very first payout will go through 7 days after your account is opened, so be patiend for your first payout.) Keeping Scarf up to date A simple upgrade command is all you need to get the latest version of Scarf $ scarf upgrade","title":"Package manager (maintainers)"},{"location":"distribute-with-scarf/#using-scarf-as-software-distribution-tool","text":"","title":"Using Scarf as software distribution tool"},{"location":"distribute-with-scarf/#what-is-scarf-why-should-i-use-it","text":"Scarf makes it easy to publish your packages and developer tools to users on Linux and Mac, understand how your software is being used, and charge the companies that benefit from your work in a commercial setting. Scarf is a developer-centric, cross-platform system package manager. If you distribute your software with Scarf, your users will be able to easily install it with the scarf CLI, and you'll gain insights into how your software is used such as: Install counts Exit codes when your program is invoked Execution times Sub-commands and flags that are passed on the command line And much more For your users who wish to use your package without reporting usage statistics (or those who just want to support your work), Scarf gives you an easy way to collect payments in exchange. You can easily create a Scarf-connected Stripe account, set your desired price for your package, and your users can easily pay to use your package without reporting usage statistics. The best part is that you can get all of these features without writing any code! You simply upload your package to Scarf. The end-user will install your package via scarf which installs your program in a way that that Scarf can automatically capture your package's usage statistics and enforce permission levels.","title":"What is Scarf? Why should I use it?"},{"location":"distribute-with-scarf/#how-it-works","text":"When a user installs your package through Scarf, it is installed inside of a thin wrapper. This wrapper will log usage statistics automatically when it invokes your package, and can also perform other checks, like whether the user has purchased a particular tier of your package and its dependencies. To get more information on how the CLI works, you can check out the code on Github","title":"How it works"},{"location":"distribute-with-scarf/#installing-scarf","text":"On Debian-based linux systems, there is a dependency on netbase $ sudo apt install netbase To get Scarf, simply run: $ curl -L https://scarf.sh/install | bash You'll then need to add $HOME/.scarf/bin to the front of your PATH","title":"Installing Scarf"},{"location":"distribute-with-scarf/#creating-your-scarf-account","text":"Head over to https://scarf.sh to register your developer account.","title":"Creating your Scarf account"},{"location":"distribute-with-scarf/#creating-your-first-package","text":"Once you're registered, you'll want to create your package on the \"New Package\" page of the Scarf website . The package name here will be what users type when they install your package, but isn't necessarily the name of the executable they will invoke.Scarf currently supports packages in the form of: A locally built archive with an executable that can be run directly on the target platform. An npm package that you upload to scarf rather than npm itself. Scarf is actively adding other package installation types. If your package type isn't supported yet, let us know what you need and we'll prioritize it!","title":"Creating your first package"},{"location":"distribute-with-scarf/#define-your-package-specification","text":"You can now add releases to your package that your users can install! A Scarf package release primarily involves writing a small package specification or uploading your npm package directly.","title":"Define your package specification"},{"location":"distribute-with-scarf/#yaml-specifications-archive-based-packages","text":"Standard archive based packages can be described in yaml. name: curl-runnings author: Avi Press copyright: 2019 Avi Press license: MIT version: 0.11.0 # For each platform (currently MacOS and Linux_x86_64) you're distributing your release to, include an entry in distributions. distributions: - platform: MacOS # The binaries your package provides. If your binary names are the same as # their path within your archive, you can simply provide a string of binary names bins: curl-runnings: path/inside/your/archive/curl-runnings # uri can be a remote or local tar archive uri: https://github.com/aviaviavi/curl-runnings/releases/download/0.11.0/curl-runnings-0.11.0-mac.tar.gz # [Optional] if your archive has extra files that should be included, list them here includes: - ./directories - ./or-files.txt - platform: Linux_x86_64 bins: - curl-runnings uri: ./path/to/local/archive.tar.gz includes: [] depends: - scarf-packages - your-package - depends-on Some notes: You can use scarf check-package ./path/to/your/package-file.yaml to validate your package file. Currently, it won't do things like check your archive or test your release, but it will make sure you spec type-checks, and that you have a valid license type and platform. Dependency handling is still immature. Chances are, the package you depend on isn't on Scarf yet! We're working hard to fix that, however. Just send an email to help@scarf.sh or reach out on gitter and we'll help get the packages you need. Currently any dependencies you add in your scarf.yaml will use the latest validated version.","title":"Yaml specifications (archive based packages)"},{"location":"distribute-with-scarf/#npm","text":"You can upload an npm based package to scarf rather than npm itself. It will be globally installed by scarf just like any other scarf package. You'll need to make sure your package.json includes a main entry that points to the script that will be ultimately invoked, and the package must have a license. You can use `scarf check-package ./path/to/your/package.json to validate your package file.","title":"NPM"},{"location":"distribute-with-scarf/#piggybacking-on-other-package-managers","text":"If your package is already distributed with another package manager, you can configure Scarf to invoke that package install while still getting all the other benefits Scarf provides. This can be useful to get your package on Scarf if Scarf doesn't yet support your exact package type natively (if this is the case, send us an email with what you need!). Scarf will call out to the external manager on the users system. ... bins: bins - bin1 - bin2 ... - binN distributions: - external: Debian bins: *bins - external: RPM bins: *bins - external: Homebrew installCommand: install --special --flags my_package bins: *bins ... Currently supported third party package types include: Homebrew Debian ( apt ) RPM CPAN Let us know if you need something else!","title":"Piggybacking on other package managers"},{"location":"distribute-with-scarf/#uploading-your-release","text":"Once you have a valid spec, it's time to upload! You'll need your SCARF_API_TOKEN , which you can find by going to your account page . To upload, run: SCARF_API_TOKEN=${your_token} scarf upload ./path/to/your/validated-spec.(yaml|json) Packages on Scarf can't be deleted once they're uploaded! Once your release is uploaded, your users can install your package with a simple: scarf install ${your_package_name}","title":"Uploading your release"},{"location":"distribute-with-scarf/#viewing-your-package-analytics","text":"Once you've pushed a release to your package, you can head over to the dashboard to see your packages install and usage stats!","title":"Viewing your package analytics"},{"location":"distribute-with-scarf/#connecting-a-stripe-account","text":"Navigate to your account details page by clicking your username in the nav bar. Find the Connect to Stripe button at the bottom, and follow Stripe's onboarding process. It only takes a few minutes. You'll be redirected back to Scarf when the enrollment is complete.","title":"Connecting a Stripe Account"},{"location":"distribute-with-scarf/#adding-a-private-usage-tier-to-your-package","text":"Now that you've connected a Stripe account, you're ready to start collecting payments for your package! Navigate to your package detail page on Scarf and click Start monetizing package . Set your price. That's it! Scarf handles all user registration and payments so you are now fully ready to start making money from your package. Stripe will send your payouts daily to your connected bank account. (NOTE: your very first payout will go through 7 days after your account is opened, so be patiend for your first payout.)","title":"Adding a private usage tier to your package"},{"location":"distribute-with-scarf/#keeping-scarf-up-to-date","text":"A simple upgrade command is all you need to get the latest version of Scarf $ scarf upgrade","title":"Keeping Scarf up to date"},{"location":"end-user/","text":"Using Scarf as system package manager Overview In addition to easy package management, Scarf supports installing static binaries in a way that sends anonymized usage statistics to the package author. Installation On Debian-based linux systems, there is a dependency on netbase $ sudo apt-get install netbase To get Scarf, simply run: $ curl -L https://scarf.sh/install | bash You'll then need to add ~/.scarf/bin to you PATH Install your packages $ scarf install package System package file Scarf keeps track of installed packages in ~/.scarf/scarf-package.json . It can be useful to keep this file in version control so you can keep a consistent package setup across multiple computers. If you want to (re)install all packages from your system package file, run: $ scarf install --system-package-file Use a package privately All packages on Scarf are free to download, and some let you purchse the ability to use them without reporting any usage statistics! Here's how: Create an account on Scarf Add some payment information on your account settings page. Search for your package and find the Private Tier option to purchase. Select the payment details you added and confirm your purchse Find your SCARF_API_TOKEN on your account settings page. SCARF_API_TOKEN=\"${your token}\" scarf sync-access Now, any time you use your package, Scarf knows you have purchased the Private Tier for this package, and no usage statistics will be sent! Keeping Scarf up to date A simple upgrade command is all you need to get the latest version of Scarf $ scarf upgrade","title":"Package manager (end-user)"},{"location":"end-user/#using-scarf-as-system-package-manager","text":"","title":"Using Scarf as system package manager"},{"location":"end-user/#overview","text":"In addition to easy package management, Scarf supports installing static binaries in a way that sends anonymized usage statistics to the package author.","title":"Overview"},{"location":"end-user/#installation","text":"On Debian-based linux systems, there is a dependency on netbase $ sudo apt-get install netbase To get Scarf, simply run: $ curl -L https://scarf.sh/install | bash You'll then need to add ~/.scarf/bin to you PATH","title":"Installation"},{"location":"end-user/#install-your-packages","text":"$ scarf install package","title":"Install your packages"},{"location":"end-user/#system-package-file","text":"Scarf keeps track of installed packages in ~/.scarf/scarf-package.json . It can be useful to keep this file in version control so you can keep a consistent package setup across multiple computers. If you want to (re)install all packages from your system package file, run: $ scarf install --system-package-file","title":"System package file"},{"location":"end-user/#use-a-package-privately","text":"All packages on Scarf are free to download, and some let you purchse the ability to use them without reporting any usage statistics! Here's how: Create an account on Scarf Add some payment information on your account settings page. Search for your package and find the Private Tier option to purchase. Select the payment details you added and confirm your purchse Find your SCARF_API_TOKEN on your account settings page. SCARF_API_TOKEN=\"${your token}\" scarf sync-access Now, any time you use your package, Scarf knows you have purchased the Private Tier for this package, and no usage statistics will be sent!","title":"Use a package privately"},{"location":"end-user/#keeping-scarf-up-to-date","text":"A simple upgrade command is all you need to get the latest version of Scarf $ scarf upgrade","title":"Keeping Scarf up to date"},{"location":"package-analytics/","text":"Scarf SDKs for library and package authors Scarf's language SDKs provide observability into the usage of your libraries and language-level packages. By simply adding a dependency to a Scarf language library, you can be getting better insight into how your package is used, and by which companies. JavaScript Features Collects basic installation statistics on npm install . No dependencies Fully transparent to the user. Scarf will log its behavior to the console during installation. It will never silently report analytics for someone that hasn't explictly given permission to do so. Never interrupts your package installation. Reporting is done on a best effort basis. You can find scarf-js on Github or on npm directly. Installation You'll first need to create a package entry on Scarf. Be sure to select \"External library\", and set the package type to \"npm\". Once created, add a dependency on this library to your own: npm i --save @scarf/scarf Once your library is published to npm with this change, Scarf will automatically collect stats on install, no additional code is required! Head to your package's dashboard on Scarf to see your reports when available. How does it work? scarf-js registers a postInstall hook that sends telemetry information. This library has no runtime footprint, it only runs at installation time, when a developer runs npm install Continue reading below here Configuration Users of your package will be opted in by default and can opt out by setting the SCARF_ANALYTICS=false environment variable. If you'd Scarf analytics to instead be opt-in, you can set this by adding an entry to your package.json // your-package/package.json { // ... scarfSettings : { defaultOptIn : false } // ... } Scarf will now be opt-out by default, and users can set SCARF_ANALYTICS=true to opt in. Regardless of the default state, Scarf will log what it is doing to users who haven't explictly opted in or out. By default, scarf-js will only trigger analytics when your package is installed as a dependency of another package, or is being installed globally. This ensures that scarf-js analytics will not be triggered on npm install being run within your project . To change this, you can add: // your-package/package.json { // ... scarfSettings : { allowTopLevel : true } // ... } FAQ What information does scarf-js provide me as a package author? Understanding your user-base Which companies are using your package? Is your project growing or shrinking? Where? On which platforms? Which versions of your package are being used? What information does scarf js send? See more here . As a user of a package using scarf-js, how can I opt out of analytics? Scarf's analytics help support developers of the open source packages you are using, so enabling analytics is appreciated. However, if you'd like to opt out, you can add your preference to your project's package.json : // your-package/package.json { // ... scarfSettings : { enabled : false } // ... } Alternatively, you can set this variable in your environment: export SCARF_ANALYTICS=false Either route will disable Scarf for all packages. How can I inspect the JSON payload that scarf-js sends? scarf-js will run in verbose mode depending on the SCARF_VERBOSE environment variable: export SCARF_VERBOSE=true It will print out the JSON payload, as well as any debugging information. I distribute a package on npm, and scarf-js is in our dependency tree. Can I disable the analytics for my downstream dependents? Yes. By opting out of analytics via package.json , any package upstream will have analytics disbabled. // your-package/package.json { // ... scarfSettings : { enabled : false } // ... } Installers of your packages will have scarf-js disabled for all dependencies upstream from yours. Developing Setting the environment variable SCARF_LOCAL_PORT=8080 will configure Scarf to use http://localhost:8080 as the analytics endpoint host. Data collection and privacy Scarf does not store any personally identifying information from SDK telemetry data. Scarf only collects information that is helpful for: Package maintainence Identifying which companies are using a particular package, in order to set up support agreements between developers and companies. Specifically, scarf-js sends: The operating system you are using Your IP address will be used to look up any available company information. Scarf does not store the actual IP address Limited dependency tree information. Scarf sends the name and version of the package(s) that directly depend on scarf-js. Additionally, scarf-js will send SHA256-hashed name and version for the following packages in the dependency tree: Packages that depend on a package that depends on scarf-js. The root package of the dependency tree. This allows Scarf to provide maintainers information about which public packages are using their own, without exposing identifying details of non-public packages. More languages coming soon We're working to build out sibling libraries for various languages. If you're interested in using Scarf in a language we haven't released yet, let us know!","title":"Package telemetry SDKs"},{"location":"package-analytics/#scarf-sdks-for-library-and-package-authors","text":"Scarf's language SDKs provide observability into the usage of your libraries and language-level packages. By simply adding a dependency to a Scarf language library, you can be getting better insight into how your package is used, and by which companies.","title":"Scarf SDKs for library and package authors"},{"location":"package-analytics/#javascript","text":"","title":"JavaScript"},{"location":"package-analytics/#features","text":"Collects basic installation statistics on npm install . No dependencies Fully transparent to the user. Scarf will log its behavior to the console during installation. It will never silently report analytics for someone that hasn't explictly given permission to do so. Never interrupts your package installation. Reporting is done on a best effort basis. You can find scarf-js on Github or on npm directly.","title":"Features"},{"location":"package-analytics/#installation","text":"You'll first need to create a package entry on Scarf. Be sure to select \"External library\", and set the package type to \"npm\". Once created, add a dependency on this library to your own: npm i --save @scarf/scarf Once your library is published to npm with this change, Scarf will automatically collect stats on install, no additional code is required! Head to your package's dashboard on Scarf to see your reports when available.","title":"Installation"},{"location":"package-analytics/#how-does-it-work","text":"scarf-js registers a postInstall hook that sends telemetry information. This library has no runtime footprint, it only runs at installation time, when a developer runs npm install Continue reading below here","title":"How does it work?"},{"location":"package-analytics/#configuration","text":"Users of your package will be opted in by default and can opt out by setting the SCARF_ANALYTICS=false environment variable. If you'd Scarf analytics to instead be opt-in, you can set this by adding an entry to your package.json // your-package/package.json { // ... scarfSettings : { defaultOptIn : false } // ... } Scarf will now be opt-out by default, and users can set SCARF_ANALYTICS=true to opt in. Regardless of the default state, Scarf will log what it is doing to users who haven't explictly opted in or out. By default, scarf-js will only trigger analytics when your package is installed as a dependency of another package, or is being installed globally. This ensures that scarf-js analytics will not be triggered on npm install being run within your project . To change this, you can add: // your-package/package.json { // ... scarfSettings : { allowTopLevel : true } // ... }","title":"Configuration"},{"location":"package-analytics/#faq","text":"","title":"FAQ"},{"location":"package-analytics/#what-information-does-scarf-js-provide-me-as-a-package-author","text":"Understanding your user-base Which companies are using your package? Is your project growing or shrinking? Where? On which platforms? Which versions of your package are being used?","title":"What information does scarf-js provide me as a package author?"},{"location":"package-analytics/#what-information-does-scarf-js-send","text":"See more here .","title":"What information does scarf js send?"},{"location":"package-analytics/#as-a-user-of-a-package-using-scarf-js-how-can-i-opt-out-of-analytics","text":"Scarf's analytics help support developers of the open source packages you are using, so enabling analytics is appreciated. However, if you'd like to opt out, you can add your preference to your project's package.json : // your-package/package.json { // ... scarfSettings : { enabled : false } // ... } Alternatively, you can set this variable in your environment: export SCARF_ANALYTICS=false Either route will disable Scarf for all packages.","title":"As a user of a package using scarf-js, how can I opt out of analytics?"},{"location":"package-analytics/#how-can-i-inspect-the-json-payload-that-scarf-js-sends","text":"scarf-js will run in verbose mode depending on the SCARF_VERBOSE environment variable: export SCARF_VERBOSE=true It will print out the JSON payload, as well as any debugging information.","title":"How can I inspect the JSON payload that scarf-js sends?"},{"location":"package-analytics/#i-distribute-a-package-on-npm-and-scarf-js-is-in-our-dependency-tree-can-i-disable-the-analytics-for-my-downstream-dependents","text":"Yes. By opting out of analytics via package.json , any package upstream will have analytics disbabled. // your-package/package.json { // ... scarfSettings : { enabled : false } // ... } Installers of your packages will have scarf-js disabled for all dependencies upstream from yours.","title":"I distribute a package on npm, and scarf-js is in our dependency tree. Can I disable the analytics for my downstream dependents?"},{"location":"package-analytics/#developing","text":"Setting the environment variable SCARF_LOCAL_PORT=8080 will configure Scarf to use http://localhost:8080 as the analytics endpoint host.","title":"Developing"},{"location":"package-analytics/#data-collection-and-privacy","text":"Scarf does not store any personally identifying information from SDK telemetry data. Scarf only collects information that is helpful for: Package maintainence Identifying which companies are using a particular package, in order to set up support agreements between developers and companies. Specifically, scarf-js sends: The operating system you are using Your IP address will be used to look up any available company information. Scarf does not store the actual IP address Limited dependency tree information. Scarf sends the name and version of the package(s) that directly depend on scarf-js. Additionally, scarf-js will send SHA256-hashed name and version for the following packages in the dependency tree: Packages that depend on a package that depends on scarf-js. The root package of the dependency tree. This allows Scarf to provide maintainers information about which public packages are using their own, without exposing identifying details of non-public packages.","title":"Data collection and privacy"},{"location":"package-analytics/#more-languages-coming-soon","text":"We're working to build out sibling libraries for various languages. If you're interested in using Scarf in a language we haven't released yet, let us know!","title":"More languages coming soon"},{"location":"project-status/","text":"Project status Scarf is still in its very early stages and is under heavy development. Feedback of any kind of very welcome. Tell us what you think! Reach out to feedback@scarf.sh or open an issue on github for feature requests, bug reports, questions and comments.","title":"Project status"},{"location":"project-status/#project-status","text":"Scarf is still in its very early stages and is under heavy development. Feedback of any kind of very welcome. Tell us what you think! Reach out to feedback@scarf.sh or open an issue on github for feature requests, bug reports, questions and comments.","title":"Project status"},{"location":"web-traffic/","text":"Scarf can help you identify your commercial users via the web traffic to your project's documentation sites, README's, and other web properties. Unlike traditional javascript-based web analytics, image-based telemetry works in places where javascript execution is not accessible. Businesses that frequently view your project's documentation can be effective leads for landing support contracts or even sponsors, to financially support your project Features Scarf's project documentation insights help you glean: Which businesses are looking at your project's documentation. Aggregated location information associated with this web traffic. Which parts of your documentation are looked at most. Works in README's (or rendered docs generally), emails, and other places on the web where javascript is not typically executed. How it works Scarf's web traffic insights are done via a simple transparent tracking pixel. You copy an img tag from Scarf into your project's README, docs, or any other web property, and any time a user loads the image from us, Scarf will look up any business metadata associated with the address and surface that information to you (and only you). Scarf does not store the IP address itself, so no personally identifying information is being collected. Getting started Head to your Scarf dashboard and find the Documentation Insights Management section. Give your pixel(s) a name, and optionally attach it to a package you manage on Scarf.Click the \"copy\" button to copy the img tag to you clipboard, and then simply paste the tag into your project's README and any other web properties. Caveats Data Precision View counts from Documentation Insights data should be considered to be approximate and not exact. Page loads are a noisy signal, and Scarf's infrusture that serves your tracking pixel is optimized to always load quickly and never get in the way, rather than having an exact page load count. Sources Pixel-based telemetry will work on standard webpages, rendered markdown documentation on package registry sites like npm and PyPi , and anywhere an image can be embedded, with a notable exception being GitHub. When GitHub renders markdown, it rewrites URL's from their original address to https://camo.githubusercontent.com/ path , where GitHub hosts any linked images themselves. This cuts out the original host of that content from the equation, and therefor prevents Scarf from providing any insight to maintainers.","title":"Documentation insights"},{"location":"web-traffic/#features","text":"Scarf's project documentation insights help you glean: Which businesses are looking at your project's documentation. Aggregated location information associated with this web traffic. Which parts of your documentation are looked at most. Works in README's (or rendered docs generally), emails, and other places on the web where javascript is not typically executed.","title":"Features"},{"location":"web-traffic/#how-it-works","text":"Scarf's web traffic insights are done via a simple transparent tracking pixel. You copy an img tag from Scarf into your project's README, docs, or any other web property, and any time a user loads the image from us, Scarf will look up any business metadata associated with the address and surface that information to you (and only you). Scarf does not store the IP address itself, so no personally identifying information is being collected.","title":"How it works"},{"location":"web-traffic/#getting-started","text":"Head to your Scarf dashboard and find the Documentation Insights Management section. Give your pixel(s) a name, and optionally attach it to a package you manage on Scarf.Click the \"copy\" button to copy the img tag to you clipboard, and then simply paste the tag into your project's README and any other web properties.","title":"Getting started"},{"location":"web-traffic/#caveats","text":"","title":"Caveats"},{"location":"web-traffic/#data-precision","text":"View counts from Documentation Insights data should be considered to be approximate and not exact. Page loads are a noisy signal, and Scarf's infrusture that serves your tracking pixel is optimized to always load quickly and never get in the way, rather than having an exact page load count.","title":"Data Precision"},{"location":"web-traffic/#sources","text":"Pixel-based telemetry will work on standard webpages, rendered markdown documentation on package registry sites like npm and PyPi , and anywhere an image can be embedded, with a notable exception being GitHub. When GitHub renders markdown, it rewrites URL's from their original address to https://camo.githubusercontent.com/ path , where GitHub hosts any linked images themselves. This cuts out the original host of that content from the equation, and therefor prevents Scarf from providing any insight to maintainers.","title":"Sources"}]}